import { Plugin as Plugin$1 } from 'postcss';
import { Plugin, UserConfig } from 'vite';

declare type VitePlugin = Plugin | ((...params: any[]) => Plugin);
interface PhpConfiguration {
    build_path?: string;
    dev_url?: string;
    entrypoints?: false | string | string[];
    aliases?: Record<string, string>;
    public_directory?: string;
    asset_plugin?: {
        find_regex?: string;
        replace_with?: string;
    };
    commands?: string[];
}
/**
 * A plugin enabling HMR for Blade files.
 */
declare const bladeReload: () => Plugin;
/**
 * A plugin fixing Vite-related asset issues.
 * @see https://github.com/innocenzi/laravel-vite/issues/31
 */
declare const staticAssetFixer: (regex: RegExp, replaceWith: string) => Plugin;
declare class ViteConfiguration {
    publicDir: string;
    build: UserConfig['build'];
    server: UserConfig['server'];
    plugins: UserConfig['plugins'];
    base: UserConfig['base'];
    resolve: UserConfig['resolve'];
    envPrefix: UserConfig['envPrefix'];
    constructor(config?: (UserConfig | ((env: typeof process.env) => UserConfig)), artisan?: PhpConfiguration);
    /**
     * Configures the development server to use Valet's SSL certificates.
     */
    withValetCertificates(options?: {
        domain?: string;
        path?: string;
    }): this;
    /**
     * Configures the development server to use Laragon's SSL certificates.
     */
    withLaragonCertificates(path?: string): this;
    /**
     * Configures the development server to use the certificates at the given paths.
     */
    withCertificates(): this;
    withCertificates(callback: (env: typeof process.env) => [string, string]): this;
    withCertificates(key: string, cert: string): this;
    /**
     * Configures PostCSS with the given plugins.
     */
    withPostCSS(plugins?: Plugin$1[]): this;
    /**
     * Defines the directory which contains static assets.
     * Defaults to resources/static.
     */
    withStaticAssets(publicDir: string): this;
    /**
     * Defines the directory in which the assets will be generated.
     * Defaults to public/build.
     */
    withOutput(outDir: string): this;
    /**
     * @deprecated
     */
    withEntry(...entries: string[]): this;
    /**
     * @deprecated
     */
    withEntries(...entries: string[]): this;
    /**
     * Adds the given Vite plugin.
     *
     * @example
     * import vue from "@vitejs/plugin-vue"
     *
     * export default defineConfig()
     *	.withPlugin(vue)
     */
    withPlugin(plugin: VitePlugin): this;
    /**
     * Adds the given Vite plugins.
     *
     * @example
     * import vue from "@vitejs/plugin-vue"
     * import components from "vite-plugin-components"
     *
     * export default defineConfig()
     *	.withPlugins(vue, components)
     */
    withPlugins(...plugins: VitePlugin[]): this;
    /**
     * Merges in the given Vite configuration.
     */
    merge(config: UserConfig | ((env: typeof process.env) => UserConfig)): this;
}
/**
 * Calls an artisan command.
 */
declare function callArtisan(...params: string[]): string;
/**
 * Creates a Vite configuration object, simplified for use with
 * Laravel.
 *
 * @deprecated Use `defineConfig` instead
 */
declare function createViteConfiguration(): ViteConfiguration;
/**
 * Creates a Vite configuration object, simplified for use with
 * Laravel.
 *
 * @see https://github.com/innocenzi/laravel-vite
 */
declare function defineConfig(config?: UserConfig, artisan?: PhpConfiguration): ViteConfiguration;

export { ViteConfiguration, bladeReload, callArtisan, createViteConfiguration, defineConfig as default, defineConfig, staticAssetFixer };
