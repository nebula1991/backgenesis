var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  ViteConfiguration: () => ViteConfiguration,
  bladeReload: () => bladeReload,
  callArtisan: () => callArtisan,
  createViteConfiguration: () => createViteConfiguration,
  default: () => src_default,
  defineConfig: () => defineConfig,
  staticAssetFixer: () => staticAssetFixer
});
var import_path2 = __toModule(require("path"));
var import_os = __toModule(require("os"));
var import_deepmerge = __toModule(require("deepmerge"));
var import_execa = __toModule(require("execa"));
var import_chalk = __toModule(require("chalk"));
var import_dotenv = __toModule(require("dotenv"));
var import_dotenv_expand = __toModule(require("dotenv-expand"));
var import_debug = __toModule(require("debug"));

// src/manifest-plugin.ts
var import_crypto = __toModule(require("crypto"));
var import_promises = __toModule(require("fs/promises"));
var import_path = __toModule(require("path"));
function manifestPlugin() {
  const manifest = new Map();
  let config;
  return {
    name: "vite:laravel:manifest",
    apply: "build",
    enforce: "post",
    configResolved(resolved) {
      config = resolved;
    },
    async generateBundle(_, bundle) {
      const entrypoints = getEntrypoints(config);
      if (!entrypoints) {
        return;
      }
      const values = Object.values(bundle);
      const assets = values.filter((c) => c.type === "asset");
      const cssEntrypoints = entrypoints.filter((entry) => isStylesheet(entry));
      const cssAssets = assets.filter((asset) => isStylesheet(asset.name));
      if (config.build.cssCodeSplit) {
        for (const chunk of cssAssets) {
          if (!chunk.name) {
            continue;
          }
          const name = removeExtension(chunk.name);
          for (const entry of cssEntrypoints) {
            if (removeExtension(import_path.default.basename(entry)) === name) {
              manifest.set(entry, { file: chunk.fileName, src: entry, isEntry: true });
            }
          }
        }
      } else {
        const chunk = assets.find((asset) => asset.name === "style.css");
        if (chunk) {
          manifest.set(chunk.name, { file: chunk.fileName, src: chunk.name });
        }
      }
      const remaining = entrypoints.filter((entry) => isAssetEntrypoint(entry));
      for (const entry of remaining) {
        const fullPath = import_path.default.join(config.root, entry);
        const source = await import_promises.default.readFile(fullPath);
        const hash = getAssetHash(source);
        const ext = import_path.default.extname(entry);
        const name = removeExtension(entry);
        const fileName = import_path.default.posix.join(config.build.assetsDir, `${import_path.default.basename(name)}.${hash}${ext}`);
        manifest.set(entry, { file: fileName, src: entry, isEntry: true });
        if (!bundle[fileName]) {
          this.emitFile({ name: entry, fileName, source, type: "asset" });
        }
      }
    },
    async writeBundle(_opts, bundle) {
      if (!bundle["manifest.json"]) {
        return;
      }
      const manifestPath = import_path.default.resolve(config.root, config.build.outDir, "manifest.json");
      const viteManifest = JSON.parse(await import_promises.default.readFile(manifestPath, "utf8"));
      for (const [key, value] of Object.entries(viteManifest)) {
        manifest.set(key, value);
      }
      await import_promises.default.writeFile(manifestPath, JSON.stringify(Object.fromEntries(manifest), null, 2));
    }
  };
}
function getEntrypoints(config) {
  let input = config.build.rollupOptions.input;
  if (!input) {
    return null;
  }
  if (typeof input === "string") {
    input = [input];
  }
  if (typeof input === "object" && !Array.isArray(input)) {
    const keys = Object.keys(input);
    if (keys.length === 0) {
      return null;
    }
    input = keys;
  }
  if (input.length === 0) {
    return null;
  }
  return input.map((entry) => import_path.default.relative(config.root, entry));
}
function removeExtension(filename) {
  return filename.replace(/\.[^.]*$/, "");
}
function isStylesheet(filename) {
  return /\.(css|less|sass|scss|styl|stylus|pcss|postcss)$/.test(filename);
}
function isAssetEntrypoint(filename) {
  if (isStylesheet(filename)) {
    return false;
  }
  return !/\.(html|jsx?|tsx?)$/.test(filename);
}
function getAssetHash(content) {
  return (0, import_crypto.createHash)("sha256").update(content).digest("hex").slice(0, 8);
}

// src/index.ts
var debug = (0, import_debug.default)("vite:laravel");
var bladeReload = () => ({
  name: "vite:laravel:blade",
  handleHotUpdate({ file, server }) {
    if (file.endsWith(".blade.php") || file.endsWith("vite.php")) {
      server.ws.send({
        type: "full-reload",
        path: "*"
      });
    }
  }
});
var staticAssetFixer = (regex, replaceWith) => ({
  name: "static-asset-fixer",
  enforce: "post",
  apply: "serve",
  transform: (code) => ({
    code: code.replace(regex, replaceWith),
    map: null
  })
});
var ViteConfiguration = class {
  constructor(config = {}, artisan = {}) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    (0, import_dotenv_expand.default)(import_dotenv.default.config());
    debug("Loaded configuration with dotenv");
    this.envPrefix = ["VITE_", "MIX_"];
    this.base = (_a = process.env.ASSET_URL) != null ? _a : "";
    if (!this.base.endsWith("/")) {
      this.base += "/";
    }
    if (((_b = process.env.NODE_ENV) == null ? void 0 : _b.startsWith("prod")) || process.env.APP_ENV !== "local") {
      debug("Running in production, adding build path to base");
      this.base += (_c = artisan.build_path) != null ? _c : "";
      if (!this.base.endsWith("/")) {
        this.base += "/";
      }
    }
    debug("Set base URL:", this.base);
    this.plugins = [];
    this.publicDir = (_d = artisan.public_directory) != null ? _d : "resources/static";
    this.build = {
      manifest: true,
      outDir: (artisan == null ? void 0 : artisan.build_path) ? `public/${artisan.build_path}` : "public/build",
      rollupOptions: {
        input: []
      }
    };
    debug("Set build configuration:", this.build);
    this.plugins.push(bladeReload());
    this.plugins.push(manifestPlugin());
    if (artisan == null ? void 0 : artisan.aliases) {
      this.resolve = {
        alias: Object.fromEntries(Object.entries(artisan.aliases).map(([alias, directory]) => {
          return [alias, import_path2.default.join(process.cwd(), directory)];
        }))
      };
      debug("Registered aliases:", this.resolve.alias);
    }
    if (artisan == null ? void 0 : artisan.dev_url) {
      const [protocol, host, port] = artisan.dev_url.split(":");
      this.server = {
        host: host.substr(2),
        https: protocol === "https",
        port: port ? Number(port) : 3e3,
        origin: `${protocol}:${host}:${port}`,
        hmr: {
          host: host.substr(2),
          port: Number(port) || 3e3
        }
      };
      debug("Configured server:", this.server);
      if (artisan == null ? void 0 : artisan.entrypoints) {
        this.build.rollupOptions.input.push(...artisan.entrypoints);
      }
      debug("Configured entrypoints:", this.build.rollupOptions.input);
      if (((_e = artisan == null ? void 0 : artisan.asset_plugin) == null ? void 0 : _e.find_regex) && ((_f = artisan == null ? void 0 : artisan.asset_plugin) == null ? void 0 : _f.replace_with)) {
        const regex = new RegExp((_g = artisan == null ? void 0 : artisan.asset_plugin) == null ? void 0 : _g.find_regex, "g");
        const replace = artisan.dev_url + ((_h = artisan == null ? void 0 : artisan.asset_plugin) == null ? void 0 : _h.replace_with);
        this.plugins.push(staticAssetFixer(regex, replace));
        debug("Registered asset-fixing plugin:", { regex, replace });
      }
      this.merge(config);
    }
    if (artisan == null ? void 0 : artisan.commands) {
      for (const command of artisan.commands) {
        const parts = Array.isArray(command) ? command : [command];
        debug("Running:", parts.join(" "));
        debug(callArtisan(...parts));
      }
    }
  }
  withValetCertificates(options) {
    var _a, _b, _c;
    const home = (0, import_os.homedir)();
    const domain = (_b = options == null ? void 0 : options.domain) != null ? _b : (_a = process.env.APP_URL) == null ? void 0 : _a.replace(/^https?:\/\//, "");
    let path3 = (_c = options == null ? void 0 : options.path) != null ? _c : "/.config/valet/Certificates/";
    if (!domain) {
      console.warn("No domain specified. Certificates will not be applied.");
      return this;
    }
    if (!path3.endsWith("/")) {
      path3 = `${path3}/`;
    }
    return this.withCertificates(`${home}${path3}${domain}.key`, `${home}${path3}${domain}.crt`);
  }
  withLaragonCertificates(path3) {
    path3 != null ? path3 : path3 = "C:\\laragon";
    if (path3.endsWith("\\")) {
      path3 = path3.slice(0, -1);
    }
    return this.withCertificates(`${path3}\\etc\\ssl\\laragon.key`, `${path3}\\etc\\ssl\\laragon.crt`);
  }
  withCertificates(callbackOrKey, cert) {
    if (!callbackOrKey && !cert) {
      callbackOrKey = process.env.DEV_SERVER_KEY;
      cert = process.env.DEV_SERVER_CERT;
    }
    if (typeof callbackOrKey === "function") {
      [callbackOrKey, cert] = callbackOrKey(process.env);
    }
    if (!callbackOrKey && !cert) {
      console.warn(import_chalk.default.yellow.bold('(!) Certificates are not configured properly. Ensure your environment file is has "DEV_SERVER_KEY" and "DEV_SERVER_CERT".'));
      return this;
    }
    return this.merge({
      server: {
        https: {
          maxVersion: "TLSv1.2",
          key: callbackOrKey,
          cert
        }
      }
    });
  }
  withPostCSS(plugins = []) {
    return this.merge({
      css: {
        postcss: {
          plugins
        }
      }
    });
  }
  withStaticAssets(publicDir) {
    this.publicDir = publicDir;
    return this;
  }
  withOutput(outDir) {
    this.build.outDir = outDir;
    return this;
  }
  withEntry(...entries) {
    throw new Error("Adding entrypoints via vite.config.ts is no longer supported, use config/vite.php instead.");
    return this;
  }
  withEntries(...entries) {
    return this.withEntry(...entries);
  }
  withPlugin(plugin) {
    if (typeof plugin === "function") {
      plugin = plugin();
    }
    this.plugins.push(plugin);
    return this;
  }
  withPlugins(...plugins) {
    plugins.forEach((plugin) => this.withPlugin(plugin));
    return this;
  }
  merge(config) {
    if (typeof config === "function") {
      config = config(process.env);
    }
    const result = (0, import_deepmerge.default)(this, config);
    if (Reflect.has(config, "base")) {
      console.warn(import_chalk.default.yellow.bold('(!) "base" option should not be used with Laravel Vite. Use the "ASSET_URL" environment variable instead.'));
    }
    for (const [key, value] of Object.entries(result)) {
      this[key] = value;
    }
    debug("Merged configuration", config);
    return this;
  }
};
function getConfigurationFromArtisan() {
  try {
    return JSON.parse(callArtisan("vite:config"));
  } catch (error) {
    console.warn("Could not read configuration from PHP.");
    console.error(error);
  }
}
function callArtisan(...params) {
  var _a;
  return (_a = import_execa.default.sync("php", ["artisan", ...params])) == null ? void 0 : _a.stdout;
}
function createViteConfiguration() {
  return defineConfig();
}
function defineConfig(config = {}, artisan) {
  return new ViteConfiguration(config, artisan != null ? artisan : getConfigurationFromArtisan());
}
var src_default = defineConfig;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ViteConfiguration,
  bladeReload,
  callArtisan,
  createViteConfiguration,
  defineConfig,
  staticAssetFixer
});
